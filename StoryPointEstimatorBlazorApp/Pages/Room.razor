@page "/Room/{roomId:int}/{userId:int}"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
@inject DisplayGroupedModel newGroupModel
@inject IRoomDataAccess _dB
@inject IDialogService DialogService

<div>
    <MudAppBar Class="appbar" @bind-Button="Voting_Mode">
        ScrumSpace - 
        <MudButton OnClick="returnHome" Class="appbar-buttons"> 
            Home
        </MudButton> |
        <MudButton OnClick="() => setVotingMode(1)" Class="appbar-buttons">
            Fibonacci Tool
        </MudButton> |
        <MudButton OnClick="() => setVotingMode(2)" Class="appbar-buttons">
            Fist of Five
        </MudButton> |
        <MudButton OnClick="() => setVotingMode(3)" Class="appbar-buttons">
             T-Shirt Sizing
        </MudButton> |
        <MudButton OnClick="() => setVotingMode(4)" Class="appbar-buttons">
             Custom Voting
        </MudButton> |
        <MudButton OnClick="() => setVotingMode(5)" Class="appbar-buttons">
             Timer
        </MudButton> 
        <MudSpacer />
        <MudText Class="appbar-buttons">@roomGroupModel.userName</MudText>
        <MudMenu Icon="@Icons.Filled.Settings" Color="Color.Inherit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
            <MudMenuItem @onclick="OpenProfile">User Profile</MudMenuItem>
            <MudMenuItem>Dark Mode</MudMenuItem>
            <MudMenuItem @onclick="OpenAbout">About</MudMenuItem>
        </MudMenu>
    </MudAppBar>
</div>
@if (loading)
{
    <MudText>Your Room is loading...</MudText>
}
else{
    <div class="mainContainer">
        <div class="button-label-container">
            <MudItem xs="12">
            <MudPaper Class="mud-paper-buttons" Height ="650px" Elevation="0">    
                @if(Voting_Mode==1) 
                {
                    <MudItem xs="6">
                        <MudPaper Class="mud-paper-tool-name" Elevation="0">    
                            <MudText Class="mud-paper-tool-name"> Fibonacci Tool</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudButton OnClick='() => setVote("?")' Class="tool-buttons">
                         ?
                    </MudButton>
                    <MudButton OnClick='() => setVote("0")' Class="tool-buttons">
                         0
                    </MudButton>
                    <MudButton OnClick='() => setVote("0.5")' Class="tool-buttons">
                         @half
                    </MudButton>
                    <MudButton OnClick='() => setVote("1")' Class="tool-buttons">
                         1
                    </MudButton>
                    <MudButton OnClick='() => setVote("2")' Class="tool-buttons">
                         2
                    </MudButton>
                    <MudButton OnClick='() => setVote("3")' Class="tool-buttons">
                         3
                    </MudButton>
                    <MudButton OnClick='() => setVote("5")' Class="tool-buttons">
                         5
                    </MudButton>
                    <MudButton OnClick='() => setVote("8")' Class="tool-buttons">
                         8
                    </MudButton>
                    <MudButton OnClick='() => setVote("13")' Class="tool-buttons">
                         13
                    </MudButton>
                    <MudButton OnClick='() => setVote("20")' Class="tool-buttons">
                         20
                    </MudButton>
                    <MudButton OnClick='() => setVote("40")' Class="tool-buttons">
                         40
                    </MudButton>
                    <MudButton OnClick='() => setVote("100")' Class="tool-buttons">
                         100
                    </MudButton>
                    <MudButton OnClick='() => setVote("Coffee")' Class="tool-buttons">
                         @coffee
                    </MudButton> 
                }
                @if(Voting_Mode == 2)
                {
                    <MudItem xs="6">
                        <MudPaper Class="mud-paper-tool-name" Elevation="0">    
                            <MudText Class="mud-paper-tool-name"> Fist of Five</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudButton OnClick='() => setVote("1")' Class="tool-buttons">
                         1
                    </MudButton>
                    <MudButton OnClick='() => setVote("2")' Class="tool-buttons">
                         2
                    </MudButton>
                    <MudButton OnClick='() => setVote("3")' Class="tool-buttons">
                         3
                    </MudButton>
                    <MudButton OnClick='() => setVote("4")' Class="tool-buttons">
                         4
                    </MudButton>
                    <MudButton OnClick='() => setVote("5")' Class="tool-buttons">
                         5
                    </MudButton> 
                }
                @if(Voting_Mode == 3)
                {
                    <MudItem xs="6">
                        <MudPaper Class="mud-paper-tool-name" Elevation="0">    
                            <MudText Class="mud-paper-tool-name"> T-Shirt Sizing</MudText>
                        </MudPaper>
                    </MudItem>                
                    <MudButton OnClick='() => setVote("XS")' Class="tool-buttons">
                         XS
                    </MudButton>
                    <MudButton OnClick='() => setVote("S")' Class="tool-buttons">
                         S
                    </MudButton>
                    <MudButton OnClick='() => setVote("M")' Class="tool-buttons">
                         M
                    </MudButton>
                    <MudButton OnClick='() => setVote("L")' Class="tool-buttons">
                         L
                    </MudButton>
                    <MudButton OnClick='() => setVote("XL")' Class="tool-buttons">
                         XL
                    </MudButton> 
                }
                @if(Voting_Mode==4) 
                {
                    <MudItem>
                        <MudPaper Class="mud-paper-custom-scale" Elevation="0">    
                            <MudText Class="mud-paper-custom-scale"> @currentCustomTitle </MudText>
                            @if(@newGroupModel.isAdmin){
                                <MudTextField @bind-Value="newCustomTitle" Validation="@(new Func<string, IEnumerable<string>>(CustomTitleValidation))" Mask="@mask2" Class="custom-scale-input" Label="Enter Label Name" Variant="Variant.Outlined" Clearable="true"></MudTextField>
                                <!-- <MudTextField @bind-Value="customScale" Validation="@(new Func<string, IEnumerable<string>>(CustomScaleValidation))" Mask="@mask3" Class="custom-scale-input" Label="Enter Size (1-24)" Variant="Variant.Outlined" Clearable="true"></MudTextField> --> 
                                <MudButton @onclick="updateCustomVote" Class="admin-tools-buttons" Style="width: 75px; height: 30px;">Update</MudButton>
                            }
                        </MudPaper>
                    </MudItem>

                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        1</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        2</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        3</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        4</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        5</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        6</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        7</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        8</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        9</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        10</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        11</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        12</MudButton>    
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        13</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        14</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        15</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        16</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        17</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        18</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        19</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        20</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        21</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        22</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        23</MudButton>
                    <MudButton Link="" Variant="Variant.Filled"  Class="tool-buttons">
                        24</MudButton>    
                }
            </MudPaper>
            </MudItem>
            <MudItem xs="12">
            <MudPaper Class="mud-paper-room-labels" Elevation="0">  
                <MudChip Class="mud-chip" >@roomGroupModel.roomName</MudChip>
                <MudChip Class="mud-chip" >Room Code: @roomId</MudChip>
            </MudPaper>
            </MudItem>
        </div>
        <div>
        @if(@newGroupModel.isAdmin)
        {
            <MudPaper Class="mud-paper-admin-tools" Height ="115px" Elevation="0">
            <MudItem xs="6">
                <MudText Class="mud-paper-tool-name">Admin Tools</MudText>
            </MudItem>
            <MudButton OnClick="clearVotes" Class="btn admin-tools-buttons">Delete Votes</MudButton>
            <MudButton  Class="btn admin-tools-buttons">Hide Votes</MudButton>
            <MudButton  Class="btn admin-tools-buttons">Hide Users</MudButton>
            <MudButton OnClick="clearUsers" Class="btn admin-tools-buttons">Clear Users</MudButton>
            <MudButton  Class="btn admin-tools-buttons">Save Results</MudButton>
            <MudButton OnClick="deleteRoom" Class="btn admin-tools-buttons">Delete Room</MudButton>    
        </MudPaper>
        }
        <MudItem xs="12">
        <MudPaper Class="mud-paper-table" Height ="500px" Elevation="0">
        <MudItem>
                <MudText Class="mud-paper-tool-name"> Results</MudText>
        </MudItem>
        <MudSimpleTable Style="overflow-x: auto;" Class="table">
            <thead>
                <tr>
                    @foreach (var h in headings)
                    {
                        <th>@h</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in rows)
                {
                    <tr>
                        @foreach (var x in row.Split())
                        {
                            <td>@x</td>
                        }
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudPaper>
    </MudItem>
    <MudDialog @bind-Isvisible="visibleProfile" Options="dialogProfile">
        <DialogContent>
            <MudText Style="font-size: 30px">User Profile</MudText>
            <MudText Style="font-size: 16px">Current Username: @roomGroupModel.userName</MudText>
            <MudTextField @bind-Value="tempUsername" Variant="@Variant.Filled" Validation="@(new Func<string, IEnumerable<string>>(TextValidation))" Mask="@mask" Label="Change Username"></MudTextField>
            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupModel.isAdmin" Label="Facilitator" Color="Color.Primary"></MudCheckBox>
            </div>
            </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseProfile">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="SubmitProfile">Save</MudButton>
        </DialogActions>
    </MudDialog>
    <MudDialog @bind-Isvisible="visibleAbout" Options="dialogAbout">
        <DialogContent>
            <MudContainer Style="max-height: 300px; overflow-y: scroll">
                <MudText Style="font-size: 30px">About Product</MudText>
                <MudText Style="white-space: pre-wrap;">@AboutProduct</MudText>
                <MudText Style="font-size: 30px">About Creators</MudText>
                <MudText Style="white-space: pre-wrap;">@AboutUs</MudText>
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseAbout">Close</MudButton>
        </DialogActions>
    </MudDialog>
    <MudMessageBox @ref="returnHomeMSG" Title="Return Home" CancelText="Cancel">
        <MessageContent>
            Do you wish to leave this room and return home?
        </MessageContent>
        <YesButton>
            <MudButton Link="/">Return Home</MudButton>
        </YesButton>
    </MudMessageBox>
    <MudMessageBox @ref="deleteRoomMSG" Title="Delete Room" CancelText="Cancel">
        <MessageContent>
            Are you sure?
        </MessageContent>
        <YesButton>
            <MudButton >Delete Room</MudButton>
        </YesButton>
    </MudMessageBox>
    <MudMessageBox @ref="clearUsersMSG" Title="Clear Users" CancelText="Cancel">
        <MessageContent>
            Are you sure?
        </MessageContent>
        <YesButton>
            <MudButton >Clear Users</MudButton>
        </YesButton>
    </MudMessageBox>
    <MudMessageBox @ref="clearVotesMSG" Title="Clear Votes" CancelText="Cancel">
        <MessageContent>
            Are you sure?
        </MessageContent>
        <YesButton>
            <MudButton >Clear Votes</MudButton>
        </YesButton>
    </MudMessageBox>
    </div>
    </div>
}
@code {
    //data
    [Parameter]
    public int roomId{ get; set; }
    [Parameter]
    public int userId{ get; set; }
    private string tempUsername = "";
    private bool loading = true;
    private string currentCustomTitle;
    private DisplayGroupedModel roomGroupModel = new DisplayGroupedModel();

    protected override async Task OnInitializedAsync()
    {
        roomModel roomData = await _dB.GetRoomData(roomId);
        userModel userData = await _dB.GetUserData(userId);

        roomGroupModel.userName = userData.userName;
        tempUsername = roomGroupModel.userName;
        roomGroupModel.isAdmin = userData.isAdmin;

        roomGroupModel.roomName = roomData.roomName;

        roomGroupModel.currentScale = roomData.currentScale;
        roomGroupModel.scaleTitle = roomData.scaleTitle;
        currentCustomTitle = roomData.scaleTitle;

        loading = false;
    }

    //Validation
    IMask mask = new RegexMask(@"^[a-zA-Z0-9_-]+$");
    IMask mask2 = new RegexMask(@"^[ a-zA-Z0-9_-]+$");
    IMask mask3 = new BlockMask(delimiters:" ", new Block('0', 1,2));

    private IEnumerable<string> TextValidation(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 50 < ch?.Length)
        {
            yield return "Too many characters";
        }
        else if (!string.IsNullOrEmpty(ch) && 3 > ch?.Length)
        {
            yield return "Too few characters";
        }
    }
    private IEnumerable<string> CustomTitleValidation(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 100 < ch?.Length)
        {
            yield return "Too many characters";
        }
        else if (!string.IsNullOrEmpty(ch) && 3 > ch?.Length)
        {
            yield return "Too few characters";
        }
    }
    //Work in progress
    /*private IEnumerable<string> CustomScaleValidation(string ch)
    {
         if (!string.IsNullOrEmpty(ch) && 24 < ch?.Length)
         {
         yield return "Too many buttons";
         }
         else if (!string.IsNullOrEmpty(ch) && 1 > ch?.Length)
             {
             yield return "Too few buttons";
        }   
    }
    */
    //Custom Scale
    private string newCustomTitle { get; set; } = "Enter A Title";
    //private int customScale { get; set; } = 24;

    void updateCustomVote()
    {
        if(newCustomTitle.Length > 3 && newCustomTitle.Length < 101)
        {
            //if(customScale > 1 && customScale < 25)
            {
                _dB.UpdateCustomScale(roomId, newCustomTitle);
                currentCustomTitle = newCustomTitle;
            }
        }
    }
    //Settings Menu Content
    private bool visibleProfile;
    private void OpenProfile() => visibleProfile = true;
    void CloseProfile() => visibleProfile = false;
    void SubmitProfile()
    {
        if(!(tempUsername.Length > 50 || tempUsername.Length < 3)){ //valid submission
            visibleProfile = false;
            _dB.UpdateUsername(userId, tempUsername);
            roomGroupModel.userName = tempUsername;
        }
    }
    private DialogOptions dialogProfile = new() { FullWidth = true };
    private bool visibleAbout;
    private void OpenAbout() => visibleAbout = true;
    void CloseAbout() => visibleAbout = false;
    private string AboutProduct = "This is a story point estimating tool for aid in the agile development process. This tool will (hopefully) serve as the ideal aid for Paychex agile development teams as it was created specifically with that in mind. Included are several different agile development voting systems, a timer for general use, and a room creation and joining feature. All aspects of the tool are designed to be as intuitive and simple as possible to provide the quickest and easiest solution to story point estimation and agile development collaboration.";
    private string AboutUs = "This product was created by a team of four aspiring software engineers from SUNY Fredonia consisting of Derek Zeplowitz, Rick Corsi, Peyton Miller, and Tyler Dorey. All of us are extremely grateful to have the oppurtunity to work on this project as it has provided us with experience in agile development in a real world setting. We hope you have a great experience using our tool!";
    private DialogOptions dialogAbout = new() { FullWidth = true };

    //Return Home Warning
    MudMessageBox returnHomeMSG { get; set; }
    private async void returnHome()
    {
        bool? result = await returnHomeMSG.Show();
    }

    //Admin Tools
    MudMessageBox deleteRoomMSG { get; set; }
    private async void deleteRoom()
    {
        bool? result = await deleteRoomMSG.Show();
    }
    MudMessageBox clearUsersMSG { get; set; }
    private async void clearUsers()
    {
        bool? result = await clearUsersMSG.Show();
    }
    MudMessageBox clearVotesMSG { get; set; }
    private async void clearVotes()
    {
        bool? result = await clearVotesMSG.Show();
    }

    //Table
    string[] headings = { "User", "Vote" };
    string[] rows = {
        @"User1 1",
        @"User2 2",
        @"User3 3",
        @"User4 4",
        @"User5 5",
        @"User6 6",
    };

    //Voting Mode
    public int Voting_Mode { get; set; } = 1;

    void setVotingMode(int mode){
        Voting_Mode = mode;
    }
    string setVote(string val)
    {
        return val;
    }

    //Symbols
    char coffee = '\u2615';
    char half = '\u00BD';
} 