@page "/Room/{roomId:int}/{userId:int}"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject IRoomDataAccess _dB
@implements IDisposable
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<style>
    :root {
         --mud-palette-primary: #4B27FE;
         --mud-palette-secondary: #FFFFFF;
    }
</style>
<div>
    @if (_timing || _isStopwatchRunning) {<head><title>ScrumSpace | @displaytimer </title></head>}
    else {<head><title>ScrumSpace</title></head>}
    <MudAppBar Class="appbar" @bind-Button="Voting_Mode">
        <MudText Class="main-font" Style="width: 120px; min-width:120px;">ScrumSpace</MudText> -
        <MudButton OnClick="returnHome" Class="appbar-buttons"> 
            <MudText Class="main-font">Home</MudText>
        </MudButton> |
        <MudButton Disabled="@_fiboAppBar" OnClick="() => setVotingMode(1)" Class="appbar-buttons" Style="width: 150px; min-width:150px;">
            @if (_fiboAppBar) {<MudText Class="appbar-buttons-clicked">Fibonacci Tool</MudText>}
            else {<MudText Class="main-font">Fibonacci Tool</MudText>}
        </MudButton> |
        <MudButton Disabled="@_fistAppBar" OnClick="() => setVotingMode(2)" Class="appbar-buttons" Style="width: 120px; min-width:120px;">
            @if (_fistAppBar) {<MudText Class="appbar-buttons-clicked">Fist of Five</MudText>}
            else {<MudText Class="main-font">Fist of Five</MudText>}        
        </MudButton> |
        <MudButton Disabled="@_tshirtAppBar" OnClick="() => setVotingMode(3)" Class="appbar-buttons" Style="width: 140px; min-width:140px;">
            @if (_tshirtAppBar) {<MudText Class="appbar-buttons-clicked">T-Shirt Sizing</MudText>}
            else {<MudText Class="main-font">T-Shirt Sizing</MudText>}        
        </MudButton> |
        <MudButton Disabled="@_customAppBar" OnClick="() => setVotingMode(4)" Class="appbar-buttons" Style="width: 160px; min-width:160px;">
            @if (_customAppBar) {<MudText Class="appbar-buttons-clicked">Custom Voting</MudText>}
            else {<MudText Class="main-font">Custom Voting</MudText>}        
        </MudButton> |
        <MudButton Disabled="@_timerAppBar" OnClick="() => setVotingMode(5)" Class="appbar-buttons">
            @if (_timerAppBar) {
                @if (_timing || _isStopwatchRunning) {<MudText Class="appbar-buttons-clicked" Style="width: 170px; min-width:170px;"> Timing | @displaytimer </MudText>}
                else {<MudText Class="appbar-buttons-clicked" Style="width: 60px; min-width:60px;">Timer</MudText>}
                @if (_pause) {<MudText Class="appbar-buttons-clicked" Style="width: 80px; min-width:80px;">| Paused </MudText>}}
            else {
                @if (_timing || _isStopwatchRunning) {<MudText Class="main-font" Style=" width: 170px; min-width:170px;"> Timing | @displaytimer </MudText>}
                else {<MudText Class="main-font" Style=" width: 60px; min-width:60px;">Timer</MudText>}
                @if (_pause) {<MudText Class="main-font"  width: 80px; min-width:80px;">| Paused </MudText>}}
        </MudButton>
        <MudSpacer />
        <MudText Class="main-font">@newGroupedModel.userName</MudText>
        <MudMenu Icon="@Icons.Filled.Settings" Color="Color.Secondary" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
            <MudMenuItem @onclick="OpenProfile">User Profile</MudMenuItem>
            <MudMenuItem @onclick="OpenAbout">About</MudMenuItem>
        </MudMenu>
    </MudAppBar>
</div>
@if (loading) {        
        <MudText Style="font-family:'Ubuntu', sans-serif; font-weight: bold; font-size: 20px;">Your Room is loading...</MudText>
}
else{
<div class="mainContainer">
    @if (Voting_Mode != 5){
        <div>
            <MudPaper Class="mud-paper-buttons" Elevation="0">    
                @if(Voting_Mode==1) 
                {
                    <MudText Class="mud-paper-tool-name"> Fibonacci Tool</MudText>
                    <MudButton OnClick='() => setVote("?")' Class="tool-buttons">
                         ?
                    </MudButton>
                    <MudButton OnClick='() => setVote("0")' Class="tool-buttons">
                         0
                    </MudButton>
                    <MudButton OnClick='() => setVote("0.5")' Class="tool-buttons">
                         @HALF
                    </MudButton>
                    <MudButton OnClick='() => setVote("1")' Class="tool-buttons">
                         1
                    </MudButton>
                    <MudButton OnClick='() => setVote("2")' Class="tool-buttons">
                         2
                    </MudButton>
                    <MudButton OnClick='() => setVote("3")' Class="tool-buttons">
                         3
                    </MudButton>
                    <MudButton OnClick='() => setVote("5")' Class="tool-buttons">
                         5
                    </MudButton>
                    <MudButton OnClick='() => setVote("8")' Class="tool-buttons">
                         8
                    </MudButton>
                    <MudButton OnClick='() => setVote("13")' Class="tool-buttons">
                         13
                    </MudButton>
                    <MudButton OnClick='() => setVote("20")' Class="tool-buttons">
                         20
                    </MudButton>
                    <MudButton OnClick='() => setVote("40")' Class="tool-buttons">
                         40
                    </MudButton>
                    <MudButton OnClick='() => setVote("100")' Class="tool-buttons">
                         100
                    </MudButton>
                    <MudButton OnClick='() => setVote("coffee")' Class="tool-buttons">
                         @COFFEE
                    </MudButton> 
                }
                @if(Voting_Mode == 2)
                {
                    <MudText Class="mud-paper-tool-name"> Fist of Five</MudText>
                    <MudButton OnClick='() => setVote("1")' Class="tool-buttons">
                         1
                    </MudButton>
                    <MudButton OnClick='() => setVote("2")' Class="tool-buttons">
                         2
                    </MudButton>
                    <MudButton OnClick='() => setVote("3")' Class="tool-buttons">
                         3
                    </MudButton>
                    <MudButton OnClick='() => setVote("4")' Class="tool-buttons">
                         4
                    </MudButton>
                    <MudButton OnClick='() => setVote("5")' Class="tool-buttons">
                         5
                    </MudButton> 
                }
                @if(Voting_Mode == 3)
                {
                    <MudText Class="mud-paper-tool-name"> T-Shirt Sizing</MudText>
                    <MudButton OnClick='() => setVote("XS")' Class="tool-buttons">
                         XS
                    </MudButton>
                    <MudButton OnClick='() => setVote("S")' Class="tool-buttons">
                         S
                    </MudButton>
                    <MudButton OnClick='() => setVote("M")' Class="tool-buttons">
                         M
                    </MudButton>
                    <MudButton OnClick='() => setVote("L")' Class="tool-buttons">
                         L
                    </MudButton>
                    <MudButton OnClick='() => setVote("XL")' Class="tool-buttons">
                         XL
                    </MudButton> 
                }
                @if(Voting_Mode==4) 
                {
                    <MudText Class="mud-paper-tool-name"> @currentCustomTitle </MudText>
                    @if (newGroupedModel.isAdmin) {
                        <MudPaper Style="background: rgba(0,0,0,0.0);" Class="mud-paper-custom-scale" Elevation="0">
                            <MudItem Class="slider">
                                <MudText Class="slider">Number of buttons: @tempCustomScale</MudText>
                                <MudSlider Min="1" Max="24" Step="1" @bind-Value="@tempCustomScale" Style="{color: #4B27FE;}"/>
                            </MudItem>
                            <div>
                             <MudText Style="font-size: 16px; font-family: 'Ubuntu', sans-serif; font-weight: bold;">Custom Title: </MudText>
                             <input class="join-create-text-fields" type="text" @bind-value="newCustomTitle" />
                            </div>
                            <MudButton @onclick="updateCustomVote" Class="admin-tools-buttons" Style="margin-top: 35px; width: 75px; height: 30px;">
                                <MudText Class="main-font" Style="font-size: 14px;">Update</MudText>
                            </MudButton>    
                        </MudPaper>
                    }
                    foreach(int x in Enumerable.Range(1, @currentCustomScale))
                    {
                        <MudButton Variant="Variant.Filled" OnClick='()=> setVote(""+x)' Class="tool-buttons">@x</MudButton>
                    }
                }
            </MudPaper>
        </div>
    }
    @if (Voting_Mode == 5)
    {
        <div>
            @if (_stopwatchMode) {<MudText Class="mud-paper-tool-name" >Stopwatch</MudText>}
            else {<MudText Class="mud-paper-tool-name" >Timer</MudText>}
            <MudPaper Class="mud-paper-timer" Style="justify-content: space-evenly" Height ="515px" Width ="850px" Elevation="0">  
                <MudPaper Class="timer-display">
                    @if (_timerDone) {<MudText Class="main-font" Style="font-size: 70px;"> 00:00:00 </MudText>}
                    else {<MudText Class="main-font" Style="font-size: 70px;"> @displaytimer </MudText>}
                    @if (_pause) {<MudText Class="main-font" Style="font-size: 30px; padding-left: 80px; width: 80px; min-width:80px;"> (Paused) </MudText>}
                    @if (_stopwatchDone) {<MudText Class="main-font" Style="font-size: 30px; padding-left: 40px; width: 250px; min-width:250px;"> Time: @mostRecentTime </MudText>}
                </MudPaper> 
                <MudPaper Style="background: rgba(0,0,0,0.0);" Height ="400px" Width ="400px" Elevation="0">
                    @if (!_stopwatchMode) {
                    <MudButton Disabled="@_timing" OnClick="Timer" Variant="Variant.Filled" Class="timer-buttons">
                        <MudText Class="main-font" Style="font-size: 22px;">Start</MudText>
                    </MudButton>
                    }
                    else {
                    <MudButton Disabled="@_isStopwatchRunning" OnClick="Stopwatch" Variant="Variant.Filled" Class="timer-buttons">
                        @if (_timerDone) {<MudText Class="main-font" Style="font-size: 22px;">Start</MudText>}
                        else {<MudText Class="main-font" Style="font-size: 22px;">Start</MudText>}
                    </MudButton>
                    }
                    @if (!_stopwatchMode) {
                    <MudButton Disabled="@_pauseDisable" OnClick="pauseTimer" Variant="Variant.Filled" Class="timer-buttons">
                        <MudText Class="main-font" Style="font-size: 22px;">Pause</MudText>
                    </MudButton>
                    <MudButton OnClick="resetTimer" Class="timer-buttons">
                        <MudText Class="main-font" Style="font-size: 22px;">Reset</MudText>
                    </MudButton>
                    }
                    else {
                    <MudButton Disabled="@_stopDisable" OnClick="stopStopwatch" Variant="Variant.Filled" Class="timer-buttons">
                        <MudText Class="main-font" Style="font-size: 22px;">Stop</MudText>
                    </MudButton>
                    }
                    @if (!_stopwatchMode) {
                        <MudNumericField @bind-Value="Hours" Class="timer-input" Label="Hours" Variant="Variant.Outlined" AdornmentColor="Color.Primary" Min="0" Max="12" />
                        <MudNumericField @bind-Value="Minutes" Class="timer-input" Label="Minutes" Variant="Variant.Outlined" Min="0" Max="60" />
                        <MudNumericField @bind-Value="Seconds" Class="timer-input" Label="Seconds" Variant="Variant.Outlined" Min="0" Max="60" />
                    }
                </MudPaper>
            </MudPaper> 
            <MudPaper Style="background: rgba(0,0,0,0.0);" Elevation="0">
                <MudText Class="mud-paper-tool-name">Timer Tools</MudText>
                <MudButton OnClick="toggleStopwatch" Class="admin-tools-buttons" Style="width: 140px;">
                    @if (_stopwatchMode) {<MudText Class="main-font" Style="font-size: 14px;" >Timer Mode</MudText>}
                    else {<MudText Class="main-font" Style="font-size: 14px;" >Stopwatch Mode</MudText>}
                </MudButton>                <MudButton OnClick="toggleSound" Class="admin-tools-buttons" Style="width: 120px;">
                    @if (_soundOff) {<MudText Class="main-font" Style="font-size: 14px;" >Turn Sound On</MudText>}
                    else {<MudText Class="main-font" Style="font-size: 14px;" >Turn Sound Off</MudText>}
                </MudButton>
                    @if (!_soundOff) {<MudIcon Style="margin-left: 4px;" Size="Size.Large" Color="Color.Primary" Icon="@Icons.Filled.VolumeUp"/>}
            </MudPaper>
        </div>
    }
    <div>
        @if (newGroupedModel.isAdmin)
        {
            @if (Voting_Mode != 5)
            {
                <MudPaper Class="mud-paper-admin-tools" Elevation="0">
                    <MudText Class="mud-paper-tool-name">Admin Tools</MudText>
                    <MudButton OnClick="hideVotes" Class="btn admin-tools-buttons">
                        @if (hiddenVotes) {<MudText Class="main-font" Style="font-size: 14px;" >Unhide Votes</MudText>}
                        else {<MudText Class="main-font" Style="font-size: 14px;" >Hide Votes</MudText>}
                    </MudButton>
                    <MudButton OnClick="hideUsers" Class="btn admin-tools-buttons">
                        @if (hiddenUsers) {<MudText Class="main-font" Style="font-size: 14px;" >Unhide Users</MudText>}
                        else {<MudText Class="main-font" Style="font-size: 14px;" >Hide Users</MudText>}
                    </MudButton>
                    <MudButton OnClick="clearVotesMsg" Class="btn admin-tools-buttons"><MudText Class="main-font" Style="font-size: 14px;" >Clear Votes</MudText></MudButton>
                    <MudButton OnClick="clearUsers" Class="btn admin-tools-buttons"><MudText Class="main-font" Style="font-size: 14px;" >Clear Users</MudText></MudButton>
                    <MudButton OnClick="deleteRoom" Class="btn admin-tools-buttons"><MudText Class="main-font" Style="font-size: 14px;" >Delete Room</MudText></MudButton>    
                </MudPaper>
            }
        }
        @if (Voting_Mode != 5)
        {
            <MudPaper Class="mud-paper-table" Elevation="0">
                <MudItem Style="display: inline-flex; justify-content: start;">
                    <MudText Class="mud-paper-tool-name"> Results </MudText>
                        <MudButton OnClick='() => setVote("")' Class="btn admin-tools-buttons" Style="height: 36px; margin-top: 10px; margin-left: 329px">
                        <MudText Class="main-font" Style="font-size: 14px;">Clear My Vote</MudText>
                        </MudButton> 
                    <MudPaper Class="mud-paper-table-tools" Style="margin-left: 10px;">
                        <!--<MudIconButton Icon="(AT)Icons.Filled.Refresh" Color="(AT)Color.Secondary" Style=""></MudIconButton>-->
                        <MudToggleIconButton Style="" @bind-Toggled="@_isDense"
                        Icon="@Icons.Rounded.ZoomInMap" Color="@Color.Secondary"
                        ToggledIcon="@Icons.Rounded.ZoomOutMap" ToggledColor="@Color.Secondary"/>
                    </MudPaper>
                </MudItem>
                <MudTable Items="@connectedUsers" Style="background: rgba(0,0,0,0.0);" Dense="@_isDense" Hover="true" Bordered="true" Breakpoint="Breakpoint.Sm">
                    <ColGroup>
                        <col style="width: 50%;" />
                        <col style="width: 50%;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<userModel, object>(x=>x.userName)">User</MudTableSortLabel></MudTh>
                            @if (Voting_Mode == 1) {
                                    <MudTh>Story Points</MudTh>
                            }
                            else if (Voting_Mode == 2) {
                                    <MudTh>Fingers</MudTh>
                            }
                            else if (Voting_Mode == 3) {
                                    <MudTh>Size</MudTh>
                            }
                            else {
                                    <MudTh>@currentCustomTitle</MudTh>
                            }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="User">
                            @if (!hiddenUsers)
                            {                         
                                @if(!context.observer){
                                    <MudText Class="table-vote-text">
                                    @context.userName
                                    @if (context.isAdmin)
                                    {
                                    @STAR
                                    }
                                    @if (userId == @context.userId)
                                    {
                                    @Me
                                    }
                                    </MudText>
                                }
                            }
                        </MudTd>
                        <MudTd DataLabel="Vote">
                            @if(!context.observer)
                            {
                                @if (Voting_Mode == 1) {
                                    @if (@votesCleared) {
                                    context.fibVote = "";
                                    }
                                    @if (context.fibVote != "") 
                                    {
                                        <MudPaper Class="vote-background">
                                            @if (!hiddenVotes) 
                                            {
                                            <MudText Class="table-vote-text">
                                                @if(context.fibVote.Equals("coffee")) 
                                                {
                                                    @COFFEE
                                                }
                                                else if(context.fibVote.Equals("half")) 
                                                {
                                                    @HALF
                                                }
                                                else 
                                                {
                                                    @context.fibVote
                                                }
                                            </MudText>
                                            }
                                            else 
                                            {
                                                @if (userId == @context.userId) 
                                                {
                                                    <MudText Class="table-vote-text">@fiboVoteClient</MudText>  
                                                }
                                            }
                                    </MudPaper>
                                    }   
                                }
                                else if (Voting_Mode == 2) {
                                    @if (@votesCleared) {
                                    context.fistVote = "";
                                    }
                                    @if (context.fistVote != "") {
                                        <MudPaper Class="vote-background">
                                            @if (!hiddenVotes)
                                            {
                                            <MudText Class="table-vote-text">@context.fistVote</MudText>  
                                            }
                                            else {
                                                @if (userId == @context.userId) {
                                                <MudText Class="table-vote-text">@fistVoteClient</MudText>  
                                                }
                                            }
                                        </MudPaper>
                                    }   
                                }
                                else if (Voting_Mode == 3) {
                                    @if (@votesCleared) {
                                    context.tshirtVote = "";
                                    }
                                    @if (context.tshirtVote != "") {
                                        <MudPaper Class="vote-background">
                                            @if (!hiddenVotes)
                                            {
                                            <MudText Class="table-vote-text">@context.tshirtVote</MudText>  
                                            }
                                            else {
                                                @if (userId == @context.userId) {
                                                <MudText Class="table-vote-text">@tshirtVoteClient</MudText>  
                                                }
                                            }
                                        </MudPaper>
                                    }   
                                }
                                else if (Voting_Mode == 4) {
                                    @if (@votesCleared) {
                                    context.scaleVote = "";
                                    }
                                    @if (context.scaleVote != "") {
                                        <MudPaper Class="vote-background">
                                            @if (!hiddenVotes)
                                            {
                                            <MudText Class="table-vote-text">@context.scaleVote</MudText>  
                                            }
                                            else {
                                                @if (userId == @context.userId) {
                                                <MudText Class="table-vote-text">@scaleVoteClient</MudText>  
                                                }
                                            }
                                        </MudPaper>
                                    }   
                                }  
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    </div>
</div>
@if (Voting_Mode != 5) {
    <div style="position: fixed; bottom: 2%; left: 1%;">
    <MudPaper Class="roomname-display">
        <MudText Class="main-font" Style="font-size: 18px; padding: 15px;">Room: @newGroupedModel.roomName</MudText>
    </MudPaper>
    </div>
}
<MudDialog @bind-Isvisible="visibleProfile" Options="dialogProfile">
    <DialogContent>
        <MudText Style="font-size: 30px">User Profile</MudText>
        <MudText Class="table-vote-text">Username</MudText>
        <input class="join-create-text-fields" type="text" @bind-value="tempUsername" />
        <div class = "inputSpacer">
            <MudCheckBox @bind-Checked="tempAdmin" Label="Facilitator" Color="Color.Primary"></MudCheckBox>
            @if(tempAdmin)
            {
                <MudCheckBox @bind-Checked="tempObserver" Label="Observer Mode" Color="Color.Primary"></MudCheckBox>
            }        
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseProfile">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitProfile">Save</MudButton>
    </DialogActions>
</MudDialog>
<MudDialog @bind-Isvisible="visibleAbout" Options="dialogAbout">
    <DialogContent>
        <MudContainer Style="max-height: 300px; overflow-y: scroll">
            <MudText Style="font-size: 30px">About Product</MudText>
            <MudText Style="white-space: pre-wrap;">@AboutProduct</MudText>
            <MudText Style="font-size: 30px">About Creators</MudText>
            <MudText Style="white-space: pre-wrap;">@AboutUs</MudText>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseAbout">Close</MudButton>
    </DialogActions>
</MudDialog>
@if (_timerDone) {
    _timing = false;
    timerNotification();
    _timerDone = false;
}
<MudMessageBox @ref="returnHomeMSG" Title="Return Home" CancelText="Cancel">
    <MessageContent>
        Do you wish to leave this room and return home?
    </MessageContent>
    <YesButton>
        <MudButton OnClick="removeUserReturnHome">Return Home</MudButton>
    </YesButton>
</MudMessageBox>
<MudMessageBox @ref="deleteRoomMSG" Title="Delete Room" CancelText="Cancel">
    <MessageContent>
        Are you sure?
    </MessageContent>
    <YesButton>
        <MudButton OnClick="deleteRoomConfirmed">Delete Room</MudButton>
    </YesButton>
</MudMessageBox>
<MudMessageBox @ref="clearUsersMSG" Title="Clear Users" CancelText="Cancel">
    <MessageContent>
        Are you sure?
    </MessageContent>
    <YesButton>
        <MudButton OnClick="clearUsersConfirmed">Clear Users</MudButton>
    </YesButton>
</MudMessageBox>
<MudMessageBox @ref="clearVotesMSG" Title="Clear Votes" CancelText="Cancel">
    <MessageContent>
        Are you sure?
    </MessageContent>
    <YesButton>
        <MudButton OnClick="clearVotes" >Clear Votes</MudButton>
    </YesButton>
</MudMessageBox>
<MudMessageBox @ref="timerNotificationMSG" YesText="Ok">
    <MessageContent>
        <MudText Style="font-family:'Ubuntu', sans-serif; font-weight: bold; font-size: 20px;"> Timer Finished </MudText>
        @if (!_soundOff)
        {
        <audio autoplay><source src="/Audio/TimerSound.mp3" /></audio>
        }
    </MessageContent>
</MudMessageBox>
}
@code {
    private HubConnection? hubConnection;
    //data
    [Parameter]
    public int roomId{ get; set; }
    [Parameter]
    public int userId { get; set; }
    private string tempUsername = "";
    private bool tempAdmin;
    private bool loading = true;
    private string currentCustomTitle = "Custom Title";
    private List<userModel> connectedUsers = new List<userModel>();
    DisplayGroupedModel newGroupedModel = new DisplayGroupedModel();

    protected override async Task OnInitializedAsync() 
    {
        try{
            roomModel roomData = await _dB.GetRoomData(roomId);
            currentCustomTitle = roomData.scaleTitle;
            currentCustomScale = roomData.currentScale;
            tempCustomScale = roomData.currentScale;
            newGroupedModel.scaleTitle = roomData.scaleTitle;
            newGroupedModel.roomName = roomData.roomName;
            newGroupedModel.currentScale = roomData.currentScale;
            hiddenUsers = roomData.hideUsers;
            hiddenVotes = roomData.hideVotes;
            connectedUsers = await _dB.getConnectedUsers(roomId);
            userModel userData = await _dB.GetUserData(userId);
            newGroupedModel.userId = userData.userId;
            newGroupedModel.userName = userData.userName;
            tempUsername = userData.userName;
            tempAdmin = userData.isAdmin;
            tempObserver = userData.observer;
            newGroupedModel.observer = userData.observer;
            newGroupedModel.isAdmin = userData.isAdmin;
        }
        catch (InvalidOperationException) //race condition involving user joining a room while it is being cleared or deleted
        {
            _dB.removeUserData(roomId, userId);
            NavigationManager.NavigateTo("Error");
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("VotingHub"))
            .Build();

        hubConnection.On<int, string, int>("receiveVote", (user, vote, votingMode) =>
        {
            userModel found = connectedUsers.Find(x => x.userId == user);
            if(found is not null)
            {
                if (votingMode == 1)
                {
                    if(vote.Equals("coffee")){
                        found.fibVote = ""+COFFEE;
                    }
                    else if (vote.Equals("0.5")){
                        found.fibVote = "" + HALF;
                    }
                    else{
                        found.fibVote = vote;
                    }
                }
                if (votingMode == 2)
                    found.fistVote = vote;
                if (votingMode == 3)
                    found.tshirtVote = vote;
                if (votingMode == 4)
                    found.scaleVote = vote;
                StateHasChanged();
            }
        });
        hubConnection.On<int, int>("connectUser", async (user, room) =>
            {
                Thread.Sleep(10);
                userModel found = connectedUsers.Find(x => x.userId == user); 
                if(room == roomId && userId != user && (found is null))
                {
                    connectedUsers.Add(await _dB.GetUserData(user));
                    StateHasChanged();
                }
            });

        hubConnection.On<int, int>("disconnectUser", async (user, room) =>
          {
              userModel found = connectedUsers.Find(x => x.userId == user);
              if (found is not null)
              {
                  connectedUsers.Remove(found);
                  StateHasChanged();
              }
          });

        hubConnection.On<int, string, bool, bool>("updateProfileRecieve", async (user, name, admin, observe) =>
        {
            userModel found = connectedUsers.Find(x => x.userId == user);
            if(found is not null)
            {
                found.userName = name;
                found.isAdmin = admin;
                found.observer = observe;
                StateHasChanged();
            }
        });

        hubConnection.On<int, string, int>("recieveScale", async(room, scaleName, scale) =>
        {
            if(room == roomId)
            {
                currentCustomScale = scale;
                currentCustomTitle = scaleName;
                StateHasChanged();
            }
        });

        hubConnection.On<int, bool>("removeUser", async (room, everyone) =>
        {
            bool currentAdminStatus = _dB.getAdminStatus(userId); //need to pull newest data because signalR takes intitial state not the possible modified state
        if(roomId == room)
            {
                if(everyone) //everyone is true then remove everyone regardless of admin status (for room delete)
            {
                    _dB.removeUserData(roomId, userId);
                    NavigationManager.NavigateTo("/RoomDeleted/true", true);
                }
                else if(!everyone && !currentAdminStatus)//not everyone and user is not an admin (clear users)
            {
                    _dB.removeUserData(roomId, userId);
                    NavigationManager.NavigateTo("/RoomDeleted/false", true);
                }
                else if(!everyone && currentAdminStatus) //not everyone and user is an admin (clear users)
            {
                    try
                    {
                        Thread.Sleep(500);
                        connectedUsers = await _dB.getConnectedUsers(roomId);
                        StateHasChanged();
                    }
                    catch (InvalidOperationException) //possible failure to grab new list
                {
                        _dB.removeUserData(userId, roomId); //ensure user data is removed
                    if(hubConnection is not null)
                        {
                            await hubConnection.SendAsync("userDisconnect", userId, roomId); 
                        }
                        NavigationManager.NavigateTo("Error");
                    }
                }
            }
        });

        hubConnection.On<int, bool>("recieveHideVotes", async(room, status) =>
        {
            if(roomId == room)
            {
                hiddenVotes = status;
                StateHasChanged();
            }
        });

        hubConnection.On<int, bool>("recieveHideUsers", async(room, status) =>
        {
            if(roomId == room)
            {
                hiddenUsers = status;
                StateHasChanged();
            }
        });
        hubConnection.On<int, List<userModel>>("recieveClearedList", async (room, newlist) =>
        {
            if(roomId == room)
            {
                connectedUsers = newlist;
                StateHasChanged();
            } 
        });
        await hubConnection.StartAsync();
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("userConnected", userId, roomId);
        }
        loading = false;
    }

    public void Dispose() //called on page close
    {
        if(hubConnection is not null)
        {
            hubConnection.StopAsync();
            //NavigationManager.NavigateTo("/");
        }
    }

    //Custom Scale
    private string newCustomTitle { get; set; } = "";
    private int currentCustomScale;
    private int tempCustomScale;

    async void updateCustomVote()
    {
        if(newCustomTitle.Length > 3 && newCustomTitle.Length < 101)
        {
            _dB.UpdateCustomScaleTitle(roomId, newCustomTitle);
            currentCustomTitle = newCustomTitle;
        }
        if(tempCustomScale != currentCustomScale){
            _dB.UpdateCustomScale(roomId, tempCustomScale);
            currentCustomScale = tempCustomScale;
        }
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("updateScale", roomId, currentCustomTitle, currentCustomScale);
        }
    }
    //Settings Menu Content
    private bool tempObserver = false;
    private bool visibleProfile;
    private void OpenProfile() => visibleProfile = true;
    void CloseProfile() => visibleProfile = false;
    async void SubmitProfile()
    {
        if(!(tempUsername.Length > 50 || tempUsername.Length < 2)){ //valid submission
            visibleProfile = false;
            _dB.UpdateUsername(newGroupedModel.userId, tempUsername);
            newGroupedModel.userName = tempUsername;
            newGroupedModel.isAdmin = tempAdmin;
            if(!newGroupedModel.isAdmin){
                tempObserver = false;
                newGroupedModel.observer = false;
            }
            else{
                newGroupedModel.observer = tempObserver;
            }
            _dB.UpdateAdmin(newGroupedModel.userId, newGroupedModel.isAdmin, newGroupedModel.observer);
            connectedUsers = await _dB.getConnectedUsers(roomId);
            StateHasChanged();
            if(hubConnection is not null)
            {
                await hubConnection.SendAsync("updateUserProfile", userId, newGroupedModel.userName, newGroupedModel.isAdmin, newGroupedModel.observer);
            }
        }
    }
    private DialogOptions dialogProfile = new() { FullWidth = true };
    private bool visibleAbout;
    private void OpenAbout() => visibleAbout = true;
    void CloseAbout() => visibleAbout = false;
    private string AboutProduct = "This is a story point estimating tool for aid in the agile development process. This tool will (hopefully) serve as the ideal aid for Paychex agile development teams as it was created specifically with that in mind. Included are several different agile development voting systems, a timer for general use, and a room creation and joining feature. All aspects of the tool are designed to be as intuitive and simple as possible to provide the quickest and easiest solution to story point estimation and agile development collaboration.";
    private string AboutUs = "This product was created by a team of four aspiring software engineers from SUNY Fredonia consisting of Derek Zeplowitz, Rick Corsi, Peyton Miller, and Tyler Dorey. All of us are extremely grateful to have the oppurtunity to work on this project as it has provided us with experience in agile development in a real world setting. We hope you have a great experience using our tool!";
    private DialogOptions dialogAbout = new() { FullWidth = true };
    //Return Home Warning
    MudMessageBox returnHomeMSG { get; set; }
    private async void returnHome()
    {
        if (!loading)
        {
            bool? result = await returnHomeMSG.Show();
        }
    }

    private void removeUserReturnHome()
    {
        _dB.removeUserData(roomId, userId);
        if(hubConnection is not null)
        {
            hubConnection.SendAsync("userDisconnect", userId, roomId);
        }
        NavigationManager.NavigateTo("/");
    }
    //Admin Tools
    private bool hiddenUsers = false;
    private bool hiddenVotes = true;
    private bool votesCleared = false;
    MudMessageBox deleteRoomMSG { get; set; }
    private bool _isDense = false;
    private async void deleteRoom()
    {
        bool? result = await deleteRoomMSG.Show();
    }

    private void deleteRoomConfirmed()
    {
        if(hubConnection is not null){
            hubConnection.SendAsync("userRemoval", roomId, true);
            _dB.removeRoomData(roomId);
            _dB.removeUserData(roomId, userId);
            Thread.Sleep(500); //Wait for all clients to recieve message
            NavigationManager.NavigateTo("/RoomDeleted/true");
        }
    }

    MudMessageBox clearUsersMSG { get; set; }
    private async void clearUsers()
    {
        bool? result = await clearUsersMSG.Show();
    }

    private async void clearUsersConfirmed(){
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("userRemoval", roomId, false);
        }
    }
    MudMessageBox clearVotesMSG { get; set; }
    private async void clearVotesMsg()
    {
        bool? result = await clearVotesMSG.Show();
    }

    private async void clearVotes()
    {
        if(hubConnection is not null){
            connectedUsers = await _dB.GetClearedVotesList(roomId);
            await hubConnection.SendAsync("sendClearedVotes", roomId, connectedUsers);
        }
    }
    private void hideUsers(){
        if(hiddenUsers)
        {
            hiddenUsers = false;
        }
        else
        {
            hiddenUsers = true;
        }
        if(hubConnection is not null)
        {
            hubConnection.SendAsync("sendHideUsers", roomId, hiddenUsers);
            _dB.UpdateHideUsers(roomId, hiddenUsers);
        }
    }
    private void hideVotes(){
        if(hiddenVotes)
        {
            hiddenVotes = false;
        }
        else
        {
            hiddenVotes = true;
        }
        if(hubConnection is not null)
        {
            hubConnection.SendAsync("sendHideVotes", roomId, hiddenVotes);
            _dB.UpdateHideVotes(roomId, hiddenVotes);
        }
    }
    //Voting Mode

    public int Voting_Mode { get; set; } = 1;
    string fiboVoteClient { get; set; }
    string fistVoteClient { get; set; } 
    string tshirtVoteClient { get; set; }
    string scaleVoteClient { get; set; } 
    void setVotingMode(int mode){
        Voting_Mode = mode;
        if(Voting_Mode == 1) //fib vote
        {
            AppBarEverythingFalse();
            _fiboAppBar = true;
        }
        else if (Voting_Mode == 2) //Fist vote
        {
            AppBarEverythingFalse();
            _fistAppBar = true;
        }
        else if (Voting_Mode == 3) //Tshirt vote
        {
            AppBarEverythingFalse();
            _tshirtAppBar = true;
        }
        else if (Voting_Mode == 4) //custom scale
        {
            AppBarEverythingFalse();
            _customAppBar = true;
        }
        else if (Voting_Mode == 5) //timer
        {
            AppBarEverythingFalse();
            _timerAppBar = true;
        }
    }
    void setVote(string val)
    {
        try
        {
            _dB.UpdateVote(newGroupedModel.userId, Voting_Mode, val);
            if (Voting_Mode == 1)//fib vote
            {
                userModel found = connectedUsers.Find(x => x.userId == newGroupedModel.userId);
                if (val.Equals("coffee"))
                {
                    found.fibVote = "" + COFFEE;
                    fiboVoteClient = "" + COFFEE;
                }
                else if (val.Equals("0.5"))
                {
                    found.fibVote = "" + HALF;
                    fiboVoteClient = "" + HALF;
                }
                else
                {
                    found.fibVote = val;
                    fiboVoteClient = val;
                }
            }
            else if (Voting_Mode == 2) //Fist vote
            {
                userModel found = connectedUsers.Find(x => x.userId == newGroupedModel.userId);
                found.fistVote = val;
                fistVoteClient = val;
            }
            else if (Voting_Mode == 3) //Tshirt vote
            {
                userModel found = connectedUsers.Find(x => x.userId == newGroupedModel.userId);
                found.tshirtVote = val;
                tshirtVoteClient = val;
            }
            else if (Voting_Mode == 4) //custom scale
            {
                userModel found = connectedUsers.Find(x => x.userId == newGroupedModel.userId);
                found.scaleVote = val;
                scaleVoteClient = val;
            }
            if (hubConnection is not null)
            {
                hubConnection.SendAsync("updateVote", newGroupedModel.userId, val, Voting_Mode);
            }
            StateHasChanged();
        }
        catch(InvalidOperationException){ //race condition involving room being deleted/cleared at the same time user votes
            _dB.removeUserData(userId, roomId); //ensure user data is removed
            if(hubConnection is not null)
            {
                hubConnection.SendAsync("userDisconnect", userId, roomId); //if the case is where user joins during clear make sure user is removed from the list
            }
            NavigationManager.NavigateTo("Error");
        }
    }
    //Timer
    private int Seconds { get; set; } //number of seconds timer will run for
    private int Minutes { get; set; } //number of minutes timer will run for
    private int Hours { get; set; } //number of hours timer will run for
    TimeSpan TimeRemaining;
    string displaytimer = "00:00:00"; //displayed time
    string mostRecentTime = "00:00:00"; //displayed time
    private bool _timing = false;
    private bool _pause = false;
    private bool _reset = false;
    private bool _timerDone = false;
    private bool _pauseDisable = true;
    private bool _soundOff = true;
    private bool _stopwatchMode = false;
    private bool _isStopwatchRunning = false;
    private bool _stopwatchDone = false;
    private bool _stopDisable = true;
    async Task Timer()
    {
        _timerDone = false;
        _timing = true;
        _pauseDisable = false;
        if(!_pause) TimeRemaining = new TimeSpan(Hours, Minutes, Seconds+1); //if not paused create new timer
        else //resume timer where it left off
        {
            _pause = false;
            TimeRemaining = TimeRemaining.Duration(); //create new timer with previous timer's duration b/c timespan has no resume functionality
        }
        while (TimeRemaining > new TimeSpan()) //progress timer until 0
        {
            if (!_pause) //if not paused progress timer
            {
                await Task.Delay(1000);
                TimeRemaining = TimeRemaining.Subtract(new TimeSpan(0,0,1));
                displaytimer = TimeRemaining.ToString();
                StateHasChanged();
            }
            else{ //stop timing when paused
                break;
            }
        }
        _reset = false;
        if(!_pause && !_reset)
        {//do not display Times Up! When paused or after reset
            await AfterTime();
        }
        StateHasChanged();
    }
    async Task Stopwatch() {
        _stopwatchDone = false;
        TimeRemaining = new TimeSpan(0, 0, 0);
        _isStopwatchRunning = true;
        _stopDisable = false;
        while (_isStopwatchRunning) {
            await Task.Delay(1000);
            if (_isStopwatchRunning)
            {
                TimeRemaining = TimeRemaining.Add(new TimeSpan(0, 0, 1));
                displaytimer = TimeRemaining.ToString();
                StateHasChanged();
            }
        }
    }
    void pauseTimer()
    {
        TimeRemaining = TimeRemaining.Add(new TimeSpan(0,0,1));
        _pause = true;
        _timing = false;
        _pauseDisable = true;
    }
    void stopStopwatch()
    {
        _isStopwatchRunning = false;
        _stopwatchDone = true;
        _stopDisable = true;
        displaytimer = "00:00:00";
        mostRecentTime = TimeRemaining.ToString();
    }
    Task AfterTime()
    {
        _pauseDisable = true;
        _timerDone = true;
        displaytimer = "00:00:00";
        return Task.CompletedTask;
    }
    void resetTimer()
    {
        _timerDone = false;
        _timing = false;
        _pauseDisable = true;
        _pause = false;
        _reset = true;
        displaytimer = "00:00:00";
        TimeRemaining = new TimeSpan(0, 0, 1);
    }
    MudMessageBox timerNotificationMSG { get; set; }
    private async void timerNotification()
    {
        bool? result = await timerNotificationMSG.Show();
    }
    void toggleSound()
    {
        if(_soundOff)
        {
            _soundOff = false;
        }
        else
        {
            _soundOff = true;
        }    
    }
    void toggleStopwatch()
    {
        if(_stopwatchMode)
        {
            _pause = false;
            _stopDisable = true;
            _stopwatchDone = false;
            _isStopwatchRunning = false;
            displaytimer = "00:00:00";
            TimeRemaining = new TimeSpan(0, 0, 1);
            _stopwatchMode = false;
        }
        else
        {
            _pause = false;
            _stopDisable = true;
            _stopwatchDone = false;
            _isStopwatchRunning = false;
            _reset = true;
            displaytimer = "00:00:00";
            TimeRemaining = new TimeSpan(0, 0, 1);
            Hours = 0;
            Minutes = 0;
            Seconds = 0;
            _stopwatchMode = true;
        }    
    }
    //AppBar
    private bool _fiboAppBar = true;
    private bool _fistAppBar = false;
    private bool _tshirtAppBar = false;
    private bool _customAppBar = false;
    private bool _timerAppBar = false;

    void AppBarEverythingFalse(){
        _fiboAppBar = false;
        _fistAppBar = false;
        _tshirtAppBar = false;
        _customAppBar = false;
        _timerAppBar = false;
    }
    //Symbols and Strings
    const char COFFEE = '\u2615';
    const char HALF = '\u00BD';
    const char STAR = '\u2B50';
    private string Me = " (Me)";
} 