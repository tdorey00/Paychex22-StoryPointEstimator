@page "/joinRoom"
@using StoryPointEstimatorBlazorApp.Models
<style>
    .inputArea{
        text-align : center;
    }
    .inputText{
        background-color: #EDEDED;
        display:inline-block;
        padding-left:30px;
        padding-right:30px;
        padding-top:30px;
        padding-bottom:30px;
        margin:10px;
    }
    .inputSpacer{
        padding-top:10px;
        padding-bottom:10px;
    }
</style>

<div class="inputArea">
    <div class="inputText">
         <EditForm Model="@newRoomModel" OnValidSubmit="@insertData">
             <ObjectGraphDataAnnotationsValidator />

             <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Mask="@mask" Label="Username" 
                      @bind-Value="newGroupedModel.userName"  Variant="@Variant.Outlined" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Mask="@mask2" Label="Room Code" 
                      @bind-Value="newGroupedModel.roomId"  Variant="@Variant.Outlined" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupedModel.isAdmin" Label="Are you a facilitator?" Color="Color.Primary"></MudCheckBox>
            </div>

            <button type="submit" class="btn btn-primary">Join Room</button>
            <a class="btn btn-primary" href="/">Cancel</a>

         </EditForm>
    </div>
</div>

@code {

    //Input Masks
    IMask mask = new BlockMask(delimiters:" ", new Block('a', 1,50));
    IMask mask2 = new BlockMask(delimiters:" ", new Block('a', 1,4));
    //Datamodels
    private DisplayGroupedModel newGroupedModel = new DisplayGroupedModel();

    //TODO When database is finished need to make sure generated code is unique
    private int createUserId()
    {
        Random rand = new Random();
        return rand.Next(1000, 10000); //generates a random user ID between 1000 and 9999
    }

     private async Task insertData(){
        //TODO Add data to newRoomModel and update db 
    }
}
