@page "/joinRoom"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
@using System.Data.SqlClient
@inject IRoomDataAccess _dB
@inject NavigationManager NavigationManager
<style>
    :root {
         --mud-palette-primary: #4B27FE;
    }
    .inputArea{
        text-align : center;
    }
    .inputText{
        display:flex;
        justify-content: center;
        padding-left:30px;
        padding-right:30px;
        padding-top:30px;
        padding-bottom:30px;
        max-width: 265px;
        min-width: 265px;
        margin-top: 0px;
        margin-bottom: 0px;
        flex-direction: column;
    }
    .inputSpacer{
        padding-top:10px;
        padding-bottom:10px;
    }
</style>
<head><title>ScrumSpace</title></head>
<img src="/css/LogoExample3.png" width=100 height=100/>


<div style="display: flex; justify-content: center;">
    <MudPaper Class="inputArea" Width="265px" Elevation="3">
    <div class="inputText">
        <div>
            @if (!validSubmit && submitBtnClicked)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Invalid Submission! Please fix errors.</MudAlert>
            }
            @if(sqlError && submitBtnClicked)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Error! Please click join room again!</MudAlert>
            }
        </div>
        <EditForm Model="@newGroupedModel">

             <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Style="max-width: 40px;">
                        <MudItem xs="12"> 
                            <MudText Class="table-vote-text">Username: </MudText>
                            <input class="join-create-text-fields" type="text" @bind-value="newGroupedModel.userName" />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class = "form-group">
                    <MudGrid Class = "justify-space-between" Style = "max-width: 400px;">
                        <label for="dropdown" class="table-vote-text" style="margin-left: 12px;">Select a room:</label>
                        <InputSelect class="join-create-text-fields" style="margin-left: 12px; margin-bottom: 15px;" id="dropdown" @bind-Value="tempRoomName">
                                @foreach(string roomName in availableRoomNames)
                                {
                                    <option value="@roomName">@roomName</option>
                                }
                        </InputSelect>
                        <button @onclick = "@UpdateAvailableRooms" class="btn btn-primary" style="background-color: #4B27FE; color: white; width: 183px; margin-left: 22px;" >Refresh Room List</button>
                    </MudGrid>
                </div>
            </div>


            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupedModel.isAdmin" Label="Are you a facilitator?" Color="Color.Primary"></MudCheckBox>
            </div>

            <button @onclick = "@insertData" class="btn btn-primary" style="background-color: #4B27FE; color: white;">Join Room</button>
            <a class="btn btn-primary" style="background-color: #4B27FE; color: white;" href="/">Cancel</a>

            <div class = "inputSpacer">
                <p>Username must be between 3 and 50 characters.</p>
            </div>
         </EditForm>
    </div>
</MudPaper>
</div>

@code {

    //Validation
    private bool validSubmit = false; //used to display error where input is not within validation requirements
    private bool submitBtnClicked = false; //used to make sure errors do not pop up prior to submit button click
    private bool sqlError = false; //used to display error in the case where a database primary key conflict occurs

    //Drop Down Data
    private string tempRoomName = ""; //temp variable used for InputSelect
    private List<roomModel> availableRooms = new List<roomModel>();
    private string[] availableRoomNames = Array.Empty<string>();

    //Datamodels
    private List<int> userIdList = new List<int>();
    private List<int> roomIdList = new List<int>();
    private bool isValidId = false;
    DisplayGroupedModel newGroupedModel = new DisplayGroupedModel();

    protected override void OnInitialized()
    {
        UpdateAvailableRooms(); //Pull room names from dB when page loads
    }

    //This function pulls the roomModel data from the database and then creates an array with just the roomNames for selection in the InputSelect element
    private void UpdateAvailableRooms()
    {
        availableRooms = _dB.GetRoomModels(); //get room Models
        availableRoomNames = new string[availableRooms.Count]; //create array with length equal to the number of available rooms
        int counter = 0;
        foreach(roomModel room in availableRooms)
        {
            availableRoomNames[counter] = room.roomName; //add each roomName to the array
            counter++;
        }
    }
    
    //This function is a security measure to ensure that the room selected exists and has not been deleted during the users time on the page
    private bool validateRoomId()
    {
        int inputId = newGroupedModel.roomId; //the id the user inputs into the box
        roomIdList = _dB.GetRoomIds();
        foreach(int validId in roomIdList)
        {
            if(inputId == validId) 
            {
                return true; //if user input is a valid id return true
            }
        }
        return false; //user input is not valid. 
    }

    //This function creates a new random userId to be used as the primary key in the database and compares the current list of already used userId's
    private int createUserId()
    {
        Random rand = new Random();
        int possibleId = rand.Next(1000, 10000); //generates a random room code between 1000 and 9999
        bool unique = false;
        userIdList = _dB.GetUserIds(); //pull userId list from the db
        while (!unique)
        {
            int found = roomIdList.Find(x => x == possibleId);
            if(found != 0) // if found id is not unique
            {
                possibleId = rand.Next(1000, 10000); //randomize again                     
                unique = false;          
                userIdList = _dB.GetUserIds(); //refresh userId list                                                     

            }
            else
            {
                unique = true;
            }

        }
        return possibleId;
    }

    //This function inserts the userData into the database and ensures that input given is valid
    private void insertData(){
        try
        {
            sqlError = false;
            submitBtnClicked = true;
            if (!newGroupedModel.userName.Trim().Equals("")) //do not accept usernames that are just spaces
            {
                validSubmit = true;
                foreach (string roomName in availableRoomNames) //search the available rooms for the room that was selected from the dropdown
                {
                    if (tempRoomName.Equals(roomName)) 
                    {
                        //store the roomId of the room that was selected in the groupedModel
                        newGroupedModel.roomId = availableRooms.Find(x => x.roomName.Contains(tempRoomName, StringComparison.InvariantCultureIgnoreCase)).roomId;
                        break;
                    }
                }
                if (newGroupedModel.roomId != 0)
                {
                    if (newGroupedModel.userName == String.Empty || newGroupedModel.userName.Length > 50 || newGroupedModel.userName.Length < 3) //ensure input is not empty and within validation requirements
                    {
                        validSubmit = false;
                    }
                    if (validSubmit)
                    {
                        if (validateRoomId()) //if room code is valid
                        {
                            //define model for insertion
                            userModel userInsert = new userModel();
                            //bind data to insertion model
                            userInsert.isAdmin = newGroupedModel.isAdmin;
                            userInsert.userName = newGroupedModel.userName;
                            userInsert.userId = createUserId();

                            //save user model and link user to room based on user input
                            _dB.joinRoomSaveData(newGroupedModel.roomId, userInsert);
                            NavigationManager.NavigateTo("/Room/" + newGroupedModel.roomId + "/" + userInsert.userId, false); //navigate to selected room
                        }
                        else
                        {
                            isValidId = false;
                        }
                    }
                    else
                    {
                        validSubmit = false;
                    }
                }
                else
                {
                    validSubmit = false;
                }
            }
            else
            {
                validSubmit = false;
            }
        }
        catch (SqlException)//race condition where generated user Id already exists in the database
        {
            sqlError = true;
        }
    }

}
