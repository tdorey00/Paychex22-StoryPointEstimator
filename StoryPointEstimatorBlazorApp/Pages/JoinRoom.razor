@page "/joinRoom"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
@inject IRoomDataAccess _dB

<style>
    .inputArea{
        text-align : center;
    }
    .inputText{
        background-color: #EDEDED;
        display:inline-block;
        padding-left:30px;
        padding-right:30px;
        padding-top:30px;
        padding-bottom:30px;
        margin:150px;
        max-width: 265px;
        min-width: 265px;
        margin-top: 0px;
        margin-bottom: 0px;
    }
    .inputSpacer{
        padding-top:10px;
        padding-bottom:10px;
    }
    .errorText{
        color: #ad170c;
    }
</style>

<img src="/css/LogoExample3.png" width=100 height=100/>


<div class="inputArea">
    <div class="inputText">

        @if (!isValidId) //displays an error if the room code is invalid, different from valid id input pls no delete
        {
            <p class="errorText">The Room Code is invalid.</p>
        }
        <EditForm Model="@newGroupModel" OnValidSubmit="@insertData">
             <ObjectGraphDataAnnotationsValidator />

             <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12"> 
                            <MudTextField Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Mask="@mask" Label="Username" 
                      @bind-Value="newGroupModel.userName"  Variant="@Variant.Filled" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Mask="@mask2" Label="Room Code" 
                      @bind-Value="newGroupModel.roomId"  Variant="@Variant.Filled" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupModel.isAdmin" Label="Are you a facilitator?" Color="Color.Primary"></MudCheckBox>
            </div>

            <button type="submit" class="btn btn-primary">Join Room</button>
            <a class="btn btn-primary" href="/">Cancel</a>

         </EditForm>
    </div>
</div>

@code {

    //Input Masks

    IMask mask = new RegexMask(@"^[a-zA-Z0-9_-]+$");
    IMask mask2 = new BlockMask(delimiters:" ", new Block('0', 1,4));

    //Max Character Length
    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 50 < ch?.Length)
            yield return "Too many characters";
    }

    //Datamodels
    private DisplayGroupedModel newGroupModel = new DisplayGroupedModel();
    private List<int> userIdList = new List<int>();
    private List<int> roomIdList = new List<int>();
    private bool isValidId = true; 

    private bool validateRoomId()
    {
        int inputId = newGroupModel.roomId; //the id the user inputs into the box
        foreach(int validId in roomIdList)
        {
            if(inputId == validId) 
            {
                return true; //if user input is a valid id return true
            }
        }
        return false; //user input is not valid. 
    }

    private int createUserId()
    {
        Random rand = new Random();
        int possibleId = rand.Next(1000, 10000); //generates a random room code between 1000 and 9999
        bool unique = false;
        userIdList = _dB.GetUserIds(); //pull userId list from the db
        while (!unique)
        {
            foreach(int id in userIdList){
                if(id == possibleId)
                {
                    possibleId = rand.Next(1000, 10000); //randomize again                     
                    unique = false;          
                    userIdList = _dB.GetUserIds(); //refresh userId list                                                     
                    break;  //if ids match recompare entire list
                }
                else
                {
                    unique = true;
                }
            }
        }
        return possibleId;
    }

    private void insertData(){
        //define model for insertion
        userModel userInsert = new userModel();
        //bind data to insertion model
        userInsert.isAdmin = newGroupModel.isAdmin;
        userInsert.userName = newGroupModel.userName;
        userInsert.userId = newGroupModel.userId;
        //save user model and link user to room based on user input
        _dB.joinRoomSaveData(newGroupModel.roomId, userInsert); 
    }
}
