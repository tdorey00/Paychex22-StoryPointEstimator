@page "/joinRoom"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
@inject IRoomDataAccess _dB
@inject DisplayGroupedModel newGroupModel
@inject NavigationManager NavigationManager
<style>
    .inputArea{
        text-align : center;
    }
    .inputText{
        background-color: #EDEDED;
        display:inline-block;
        padding-left:30px;
        padding-right:30px;
        padding-top:30px;
        padding-bottom:30px;
        margin:150px;
        max-width: 265px;
        min-width: 265px;
        margin-top: 0px;
        margin-bottom: 0px;
    }
    .inputSpacer{
        padding-top:10px;
        padding-bottom:10px;
    }
</style>

<img src="/css/LogoExample3.png" width=100 height=100/>


<div class="inputArea">
    <div class="inputText">

        @if (!isValidId && submitBtnClicked) //displays an error if the room code is invalid, different from valid id input pls no delete
        {
             <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">The room code is invalid or a room was not selected!</MudAlert>
        }
        @if (!validSubmit && submitBtnClicked)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Invalid Submission! Please fix errors.</MudAlert>
        }
        <EditForm Model="@newGroupModel">

             <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12"> 
                            <MudTextField Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(TextValidation))" Mask="@mask" Label="Username" 
                      @bind-Value="newGroupModel.userName"  Variant="@Variant.Filled" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class = "form-group">
                    <MudGrid Class = "justify-space-between" Style = "max-width: 400px;">
                        <MudItem xs="12">
                            <MudAutocomplete T="string" Label = "Available Rooms" @bind-Value = "tempRoomName" ResetValueOnEmptyText = "true"
                                SearchFunc = "@searchRoomNames"/>
                        </MudItem>
                        <button @onclick = "@UpdateAvailableRooms" class="btn btn-primary">Refresh Room List</button>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Mask="@mask2" Label="Room Code" 
                      @bind-Value="newGroupModel.stringId"  Variant="@Variant.Filled" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupModel.isAdmin" Label="Are you a facilitator?" Color="Color.Primary"></MudCheckBox>
            </div>

            <button @onclick = "@insertData" class="btn btn-primary">Join Room</button>
            <a class="btn btn-primary" href="/">Cancel</a>

         </EditForm>
    </div>
</div>

@code {

    //Input Masks

    IMask mask = new RegexMask(@"^[a-zA-Z0-9_-]+$");
    IMask mask2 = new BlockMask(delimiters:" ", new Block('0', 1,4));

    //Validation
    private IEnumerable<string> TextValidation(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 50 < ch?.Length)
        {
            validSubmit = false;
            yield return "Too many characters";
        }
        else if (!string.IsNullOrEmpty(ch) && 3 > ch?.Length)
        {
            validSubmit = false;
            yield return "Too few characters";
        }
        else
        {
            validSubmit = true;
        }
    }
    private bool validSubmit = false;
    private bool submitBtnClicked = false;

    private string tempRoomName = "";
    private List<roomModel> availableRooms = new List<roomModel>();
    private string[] availableRoomNames = Array.Empty<string>();

    //Datamodels
    private List<int> userIdList = new List<int>();
    private List<int> roomIdList = new List<int>();
    private bool isValidId = false;

    protected override void OnInitialized()
    {
        UpdateAvailableRooms();
    }

    private void UpdateAvailableRooms()
    {
        availableRooms = _dB.GetRoomModels();
        availableRoomNames = new string[availableRooms.Count];
        int counter = 0;
        foreach(roomModel room in availableRooms)
        {
            availableRoomNames[counter] = room.roomName;
            counter++;
        }
    }

    private async Task<IEnumerable<string>> searchRoomNames (string value)
    {
        if (string.IsNullOrEmpty(value))
            return availableRoomNames;
        return availableRoomNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private bool validateRoomId()
    {
        int inputId = newGroupModel.roomId; //the id the user inputs into the box
        roomIdList = _dB.GetRoomIds();
        foreach(int validId in roomIdList)
        {
            if(inputId == validId) 
            {
                return true; //if user input is a valid id return true
            }
        }
        return false; //user input is not valid. 
    }

    private int createUserId()
    {
        Random rand = new Random();
        int possibleId = rand.Next(1000, 10000); //generates a random room code between 1000 and 9999
        bool unique = false;
        userIdList = _dB.GetUserIds(); //pull userId list from the db
        while (!unique)
        {
            foreach(int id in userIdList){
                if(id == possibleId)
                {
                    possibleId = rand.Next(1000, 10000); //randomize again                     
                    unique = false;          
                    userIdList = _dB.GetUserIds(); //refresh userId list                                                     
                    break;  //if ids match recompare entire list
                }
                else
                {
                    unique = true;
                }
            }
        }
        return possibleId;
    }

    private void insertData(){
        submitBtnClicked = true;

        foreach(string roomName in availableRoomNames)
        {
            if (tempRoomName.Equals(roomName))
            {
                newGroupModel.roomId = availableRooms.Find(x => x.roomName.Contains(tempRoomName, StringComparison.InvariantCultureIgnoreCase)).roomId;
                newGroupModel.stringId = "" + newGroupModel.roomId;
                break;
            }
        }
        //if(availableRoomNames.Where(x => x.Contains(tempRoomName, StringComparison.InvariantCultureIgnoreCase)).Equals(tempRoomName)){
        //}

        if(newGroupModel.stringId != "")
        {
            newGroupModel.roomId = Int32.Parse(newGroupModel.stringId); //turns stringId into roomId
            isValidId = true;
            if (validSubmit)
            {
                if (validateRoomId()) //if room code is valid
                {
                    //define model for insertion
                    userModel userInsert = new userModel();
                    //bind data to insertion model
                    userInsert.isAdmin = newGroupModel.isAdmin;
                    userInsert.userName = newGroupModel.userName;
                    userInsert.userId = createUserId();
                    //save user model and link user to room based on user input
                    _dB.joinRoomSaveData(newGroupModel.roomId, userInsert); 
                    NavigationManager.NavigateTo("/Room/" + newGroupModel.roomId+ "/" + userInsert.userId, true);
                }
                else
                {
                    isValidId = false;
                }
            }
            else
            {
                validSubmit = false;
            }
        }
        else
        {
            validSubmit = false;
        }
    }
}
