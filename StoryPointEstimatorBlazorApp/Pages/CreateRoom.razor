@page "/createRoom"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
@using System.Data.SqlClient
@inject IRoomDataAccess _dB

@inject NavigationManager NavigationManager

<style>
    :root {
         --mud-palette-primary: #4B27FE;
    }
    .inputArea{
        text-align : center;
    }
    .inputText{
        display:flex;
        justify-content: center;
        padding-left:30px;
        padding-right:30px;
        padding-top:30px;
        padding-bottom:30px;
        max-width: 265px;
        min-width: 265px;
        margin-top: 0px;
        margin-bottom: 0px;
        flex-direction: column;
    }
    .inputSpacer{
        padding-top:10px;
        padding-bottom:10px;
    }
</style>
<head><title>ScrumSpace</title></head>
<img src="/css/LogoExample3.png" width=100 height=100/>

<div style="display: flex; justify-content: center;">
<MudPaper Class="inputArea" Width="265px" Elevation="3">
    <div class="inputText">
        @if (!validSubmit && submitBtnClicked)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Invalid Submission! Please fix errors.</MudAlert>
        }
        @if(alreadyExists && submitBtnClicked)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Room Already Exists! Please use a different name.</MudAlert>
        }
            @if(sqlError && submitBtnClicked)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Error! Please click create room again!</MudAlert>
            }
            <EditForm Model="@newGroupedModel" OnSubmit="@insertData">
            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Style="max-width: 40px;">
                        <MudItem xs="12">
                            <MudText Class="table-vote-text">Username: </MudText>
                            <input class="join-create-text-fields" type="text" @bind-value="newGroupedModel.userName" />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Style="max-width: 120px;">
                        <MudItem xs="12">
                            <MudText Class="table-vote-text">Room Name: </MudText>
                            <input class="join-create-text-fields" type="text" @bind-value="newGroupedModel.roomName" />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupedModel.isAdmin" Label="Are you a facilitator?" Color="Color.Primary"></MudCheckBox>
            </div>

            <button type="submit" class="btn btn-primary" style="background-color: #4B27FE; color: white;">Create Room</button>
            <a class="btn btn-primary" style="background-color: #4B27FE; color: white;" href="/">Cancel</a>
            <div class = "inputSpacer">
                <p>Username must be between 3 and 50 characters. Room name must be between 4 and 50 characters.</p>
            </div>
        </EditForm>
    </div>
</MudPaper>
</div>


@code {

    //Validation
    private bool validSubmit = false; //used to display error where input is not within validation requirements
    private bool submitBtnClicked = false; //used to make sure errors do not pop up prior to submit button click
    private bool alreadyExists = false; //used to display error where room name already exists to ensure unique names
    private bool sqlError = false; //used to display error in the case where a database primary key conflict occurs

    //Data Models
    private List<int> userIdList = new List<int>(); 
    private List<int> roomIdList = new List<int>();
    private DisplayGroupedModel newGroupedModel = new DisplayGroupedModel();

    //This function creates a new random roomId to be used as the primary key in the database and compares the current list of already used roomId's
    private int createRoomCode()
    {
        Random rand = new Random();

        int randomId = rand.Next(1000, 10000); //generates a random room ID between 1000 and 9999
        bool unique = false;
        roomIdList = _dB.GetRoomIds(); //pull roomId list from dB
        while (!unique)
        {
            int found = roomIdList.Find(x => x == randomId); //check if roomId already exists in list of current users
            if(found != 0)
            {
                randomId = rand.Next(1000, 10000); //generate new Id
                unique = false;
                roomIdList = _dB.GetRoomIds(); //refresh roomId list
            }
            else
            {
                unique = true;
            } 
        }
        return randomId;
    }
    
    //This function creates a new random userId to be used as the primary key in the database and compares the current list of already used userId's
    private int createUserId()
    {
        Random rand = new Random();
        int possibleId = rand.Next(1000, 10000); //generates a random userId between 1000 and 9999
        bool unique = false;
        userIdList = _dB.GetUserIds(); //pull userId list from the db
        while (!unique)
        {
            int found = roomIdList.Find(x => x == possibleId); //check if userId is already in the list
            if(found != 0) // if found id is not unique
            {
                possibleId = rand.Next(1000, 10000); //randomize again                     
                unique = false;          
                userIdList = _dB.GetUserIds(); //refresh userId list                                                     

            }
            else
            {
                unique = true;
            }

        }
        return possibleId;
    }

    //this inserts the room data and user data entered into the input boxes into the database and navigates the user to the room they created
    private void insertData() {
        try
        {
            sqlError = false; 
            submitBtnClicked = true;
            if (!newGroupedModel.userName.Trim().Equals("") || !newGroupedModel.roomName.Trim().Equals("")) // do not allow entires with only spaces
            {
                List<string> roomNames = _dB.GetRoomNames(); //get current list of room names
                if (newGroupedModel.roomName.Equals(String.Empty) || newGroupedModel.userName.Equals(String.Empty) //ensure input areas contain data and are within length requirements
                    || newGroupedModel.roomName.Length > 50 || newGroupedModel.roomName.Length < 3 || newGroupedModel.userName.Length > 50 || newGroupedModel.userName.Length < 2)
                    validSubmit = false;
                else
                    validSubmit = true;

                string found = roomNames.Find(x => x.Equals(newGroupedModel.roomName)); //make sure room name does not already exist in the database
                if (found is not null)
                {
                    alreadyExists = true;
                }
                else
                {
                    alreadyExists = false;
                }
                if (validSubmit && !alreadyExists) //input is within validation requirements and the room name is unique
                {
                    //define roomModel and userModel
                    roomModel roomInsert = new roomModel();
                    userModel userInsert = new userModel();
                    //bind all data from GroupModel to the above models
                    roomInsert.roomId = createRoomCode();
                    newGroupedModel.roomId = roomInsert.roomId;
                    roomInsert.roomName = newGroupedModel.roomName;

                    userInsert.userId = createUserId();
                    userInsert.userName = newGroupedModel.userName;
                    userInsert.isAdmin = newGroupedModel.isAdmin;


                    _dB.createRoomSaveData(roomInsert, userInsert); //calling the method from roomDataAccess in order to save the data to the database
                    NavigationManager.NavigateTo("/Room/" + newGroupedModel.roomId + "/" + userInsert.userId, false); //send the user to the created room
                }
            }
            else
            {
                validSubmit = false;
            }
        }catch (SqlException)//race condition on create room where two of the same Id's are put in at the same time
        {
            sqlError = true;
        }
    }
}