@page "/createRoom"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
<!--inject Blazored.SessionStorage.ISessionStorageService sessionStorage-->
@inject IRoomDataAccess _dB

@inject NavigationManager NavigationManager

<style>
    .inputArea{
        text-align : center;
    }
    .inputText{
        background-color: #EDEDED;
        display:inline-block;
        padding-left:30px;
        padding-right:30px;
        padding-top:30px;
        padding-bottom:30px;
        margin:150px;
        max-width: 265px;
        min-width: 265px;
        margin-top: 0px;
        margin-bottom: 0px;
    }
    .inputSpacer{
        padding-top:10px;
        padding-bottom:10px;
    }
</style>
<head><title>ScrumSpace</title></head>
<img src="/css/LogoExample3.png" width=100 height=100/>

<div class="inputArea">
    <div class="inputText">
        @if (!validSubmit && submitBtnClicked)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Invalid Submission! Please fix errors.</MudAlert>
        }
        @if(alreadyExists && submitBtnClicked)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">Room Already Exists! Please use a different name.</MudAlert>
        }
        <EditForm Model="@newGroupedModel" OnSubmit="@insertData">
            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(TextValidation))" Mask="@mask" Label="Username" 
                      @bind-Value="newGroupedModel.userName"  Variant="@Variant.Filled" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Immediate = "true" Validation="@(new Func<string, IEnumerable<string>>(TextValidation))" Mask="@mask2" Label="Room Name" 
                      @bind-Value="newGroupedModel.roomName"  Variant="@Variant.Filled" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupedModel.isAdmin" Label="Are you a facilitator?" Color="Color.Primary"></MudCheckBox>
            </div>

            <button type="submit" class="btn btn-primary">Create Room</button>
            <a class="btn btn-primary" href="/">Cancel</a>
        </EditForm>
    </div>
</div>

@code {

    //Input Masks
    IMask mask = new RegexMask(@"^[a-zA-Z0-9_-]+$");
    IMask mask2 = new RegexMask(@"^[ ""a-zA-Z0-9#$&%!*^,.(){}'/\:;<>?@~`=+_-]+$");

    //Validation
    private IEnumerable<string> TextValidation (string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 50 < ch?.Length)
        {
            yield return "Too many characters";
        }
        else if (!string.IsNullOrEmpty(ch) && 3 > ch?.Length)
        {
            yield return "Too few characters";
        }

    }
    private bool validSubmit = false;
    private bool submitBtnClicked = false;
    private bool alreadyExists = false;

    //Data Models
    private List<int> userIdList = new List<int>(); 
    private List<int> roomIdList = new List<int>();
    private DisplayGroupedModel newGroupedModel = new DisplayGroupedModel();

    private int createRoomCode()
    {
        Random rand = new Random();

        int randomId = rand.Next(1000, 10000); //generates a random user ID between 1000 and 9999
        bool unique = false;
        roomIdList = _dB.GetRoomIds(); //pull roomId list from dB
        while (!unique)
        {
            int found = roomIdList.Find(x => x == randomId);
            if(found != 0)
            {
                randomId = rand.Next(1000, 10000);
                unique = false;
                roomIdList = _dB.GetRoomIds(); //refresh roomId list
            }
            else
            {
                unique = true;
            } 
        }
        return randomId;
    }

    private int createUserId()
    {
        Random rand = new Random();
        int possibleId = rand.Next(1000, 10000); //generates a random room code between 1000 and 9999
        bool unique = false;
        userIdList = _dB.GetUserIds(); //pull userId list from the db
        while (!unique)
        {
            int found = roomIdList.Find(x => x == possibleId);
            if(found != 0) // if found id is not unique
            {
                possibleId = rand.Next(1000, 10000); //randomize again                     
                unique = false;          
                userIdList = _dB.GetUserIds(); //refresh userId list                                                     

             }
             else
             {
                 unique = true;
             }
            
        }
        return possibleId;
    }
    

    private void insertData(){
        submitBtnClicked = true;
        List<string> roomNames = _dB.GetRoomNames();
        if (newGroupedModel.roomName.Equals(String.Empty) || newGroupedModel.userName.Equals(String.Empty)
            || newGroupedModel.roomName.Length > 50 || newGroupedModel.roomName.Length < 3 || newGroupedModel.userName.Length > 50 || newGroupedModel.userName.Length < 3)
            validSubmit = false;
        else
            validSubmit = true;

        string found = roomNames.Find(x => x.Equals(newGroupedModel.roomName));
        if(found is not null)
        {
            alreadyExists = true;
        }
        else
        {
            alreadyExists = false;
        }
        if (validSubmit && !alreadyExists)
        {
            //define roomModel and userModel
            roomModel roomInsert = new roomModel();
            userModel userInsert = new userModel();
            //bind all data from GroupModel to the above models
            roomInsert.roomId = createRoomCode();
            newGroupedModel.roomId = roomInsert.roomId;
            roomInsert.roomName = newGroupedModel.roomName;

            userInsert.userId = createUserId();
            userInsert.userName = newGroupedModel.userName;
            userInsert.isAdmin = newGroupedModel.isAdmin;
            //sessionStorage.SetItemAsync("userId", userInsert.userId);

            _dB.createRoomSaveData(roomInsert, userInsert); //calling the method from roomDataAccess in order to save the data to the database
            NavigationManager.NavigateTo("/Room/" + newGroupedModel.roomId + "/" + userInsert.userId, true);
        }
    }
}