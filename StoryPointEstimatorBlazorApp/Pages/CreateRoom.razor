@page "/createRoom"
@using StoryPointEstimatorBlazorApp.Models
@using SqlDataAccessLib
@using SQLDataAccessLibrary.Models
@inject IRoomDataAccess _dB

<style>
    .inputArea{
        text-align : center;
    }
    .inputText{
        background-color: #EDEDED;
        display:inline-block;
        padding-left:30px;
        padding-right:30px;
        padding-top:30px;
        padding-bottom:30px;
        margin:10px;
    }
    .inputSpacer{
        padding-top:10px;
        padding-bottom:10px;
    }
</style>


<div class="inputArea">
    <div class="inputText">
        <EditForm Model="@newGroupModel" OnValidSubmit="@insertData">
            <ObjectGraphDataAnnotationsValidator />

            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Mask="@mask" Label="Username" 
                      @bind-Value="newGroupedModel.userName"  Variant="@Variant.Outlined" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <div class="form-group">
                    <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                        <MudItem xs="12">
                            <MudTextField Mask="@mask2" Label="Room Name" 
                      @bind-Value="newGroupedModel.roomName"  Variant="@Variant.Outlined" Clearable />
                        </MudItem>
                    </MudGrid>
                </div>
            </div>

            <div class = "inputSpacer">
                <MudCheckBox @bind-Checked="newGroupedModel.isAdmin" Label="Are you a facilitator?" Color="Color.Primary"></MudCheckBox>
            </div>

            <button type="submit" class="btn btn-primary">Create Room</button>
            <a class="btn btn-primary" href="/">Cancel</a>
        </EditForm>
    </div>
    @*EXAMPLE DATA OUTPUT FOR TESTING*@
    @if(newGroupModel.roomId == 0)// if not loaded, works because room data is loaded last
    {
        <p>loading...</p>
    }
    else
    {
        <p>userId: @newGroupModel.userId</p>
        <br />
        <p>roomId: @newGroupModel.roomId</p>
        <br />
        <p>userName: @newGroupModel.userName</p>
        <br />
        <p>roomName: @newGroupModel.roomName</p>
        <br />
        <p>isAdmin: @newGroupModel.isAdmin</p>
    }
</div>

@code {

    //Input Masks
    public string text { get; set; }
    IMask mask = new BlockMask(delimiters:" ", new Block('a', 1,50));
    IMask mask2 = new BlockMask(delimiters: " ", new Block('a', 1, 100));
    //Data Models
    private userModel user = new userModel();
    private roomModel room = new roomModel();
    private List<int> userIdList = new List<int>(); 
    private List<int> roomIdList = new List<int>();
    private DisplayGroupedModel newGroupModel = new DisplayGroupedModel();


    //TESTING OUTPUT + DATABASE GRAB METHODS
    protected override async Task OnInitializedAsync()
    {
        user = await _dB.GetUserData(6969);
        room = await _dB.GetRoomData(1234);
        newGroupModel = new DisplayGroupedModel
            {
                roomId = room.roomId,                   //EXAMPLE STUFF DELETE AFTER WEDNESDAY
                userId = user.userId,
                userName = user.userName,
                isAdmin = user.isAdmin,
                roomName = room.roomName

            };

        //SAVE THIS STUFF
        userIdList =  await _dB.GetUserIds(); //NEEDS TO BE DONE SYNCHRONOUSLY
        roomIdList = await _dB.GetRoomIds(); 
    }




    //TODO When database is finished need to make sure generated code is unique
    private int createRoomCode()
    {
        Random rand = new Random();

        int randomId = rand.Next(1000, 10000); //generates a random user ID between 1000 and 9999
        bool unique = false;
        while (!unique)
        {
            foreach(int id in roomIdList)
            {
                if(id == randomId)
                {
                    randomId = rand.Next(1000, 10000);

                    unique = false;
                    break;
                }
                else
                {
                    unique = true;
                }
            }
        }
        return randomId;
    }
    //TODO When database is finished need to make sure generated code is unique
    private int createUserId()
    {
        Random rand = new Random();
        int possibleId = rand.Next(1000, 10000); //generates a random room code between 1000 and 9999
        bool unique = false;
        while (!unique)
        {
            foreach(int id in userIdList){
                if(id == possibleId)
                {
                    possibleId = rand.Next(1000, 10000); //randomize again                          //POSSIBLE SOLUTION NOT DONE.
                    unique = false;                                                                 //NEED TO PULL LIST SYNCHRONOUSLY PROBABLY GOING TO HAVE TO ASK AUSTIN 
                    break;  //if ids match recompare entire list
                }
                else
                {
                    unique = true;
                }
            }
        }
        return possibleId;
    }

    private async Task insertData(){
        //TODO Add data to newRoomModel and update db 
    }
}